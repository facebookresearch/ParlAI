version: 2

# -------------------------------------------------------------------------------------
# environments where we run our jobs
# -------------------------------------------------------------------------------------
standard_cpu37: &standard_cpu37
  docker:
    - image: circleci/python:3.7.5-buster-node

standard_cpu36: &standard_cpu36
  docker:
    - image: circleci/python:3.6.9-buster-node

osx_cpu37: &osx_cpu37
  macos:
    xcode: "10.1.0"
  environment:
    PYTHON: 3.7.1
    HOMEBREW_NO_AUTO_UPDATE: 1

gpu: &gpu
  environment:
    CUDA_VERSION: "10.2"
  machine:
    image: ubuntu-1604:201903-01
  resource_class: gpu.medium # tesla m60
# -------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------
# reusable commands
# -------------------------------------------------------------------------------------
fixgit: &fixgit
  # circleci sets master to the tip of the branch, which isn't super useful for us.
  # better if master looks like it would on our local machines
  run:
    name: Fixes git
    command: |
      ( [[ "$CIRCLE_BRANCH" != "master" ]] && git branch -f master origin/master ) || true

setup: &setup
  run:
    name: Sets up the virtual environment
    command: |
      mkdir -p ~/venv
      virtualenv --python=python3 ~/venv
      echo ". ~/venv/bin/activate" >> $BASH_ENV
      . ~/venv/bin/activate
      python --version
      pip3 install --progress-bar off --upgrade pip
      pip3 install --progress-bar off coverage
      pip3 install --progress-bar off codecov

codecov: &codecov
  run:
    name: Coverage report
    command: |
      codecov --flags $CIRCLE_JOB

installdeps: &installdeps
  run:
    name: Installs basic dependencies
    command: |
      pip install -r requirements.txt
      python setup.py develop
      python -c "import nltk; nltk.download('punkt')"

installtorchgpu11: &installtorchgpu11
  run:
    name: Install torch GPU and dependencies
    command: |
      pip3 install --progress-bar off 'torch<1.2.0'
      pip3 install --progress-bar off 'git+https://github.com/rsennrich/subword-nmt.git#egg=subword-nmt' # bpe support
      pip3 install --progress-bar off pytorch-pretrained-bert
      pip3 install --progress-bar off torchtext


installtorchgpu12: &installtorchgpu12
  run:
    name: Install torch GPU and dependencies
    command: |
      pip3 install --progress-bar off 'torch>=1.2.0'
      pip3 install --progress-bar off 'git+https://github.com/rsennrich/subword-nmt.git#egg=subword-nmt' # bpe support
      pip3 install --progress-bar off pytorch-pretrained-bert
      pip3 install --progress-bar off torchtext


installtorchcpuosx: &installtorchcpuosx
  run:
    name: Install torch CPU and dependencies
    command: |
      pip3 install --progress-bar off https://download.pytorch.org/whl/cpu/torch-1.0.0-cp37-none-macosx_10_7_x86_64.whl

installtorchcpu36: &installtorchcpu36
  run:
    name: Install torch CPU and dependencies
    command: |
      pip3 install --progress-bar off https://download.pytorch.org/whl/cpu/torch-1.0.1.post2-cp36-cp36m-linux_x86_64.whl

installtorchcpu37: &installtorchcpu37
  run:
    name: Install torch CPU and dependencies
    command: |
      pip3 install --progress-bar off https://download.pytorch.org/whl/cpu/torch-1.0.1.post2-cp37-cp37m-linux_x86_64.whl

setupcuda: &setupcuda
  run:
    name: Setup CUDA
    working_directory: ~/
    command: |
      # download and install nvidia drivers, cuda, etc
      wget --no-clobber -P ~/nvidia-downloads 'https://s3.amazonaws.com/ossci-linux/nvidia_driver/NVIDIA-Linux-x86_64-430.40.run'
      wget --no-clobber -P ~/nvidia-downloads http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run
      sudo /bin/bash ~/nvidia-downloads/NVIDIA-Linux-x86_64-430.40.run --no-drm -q --ui=none
      sudo sh ~/nvidia-downloads/cuda_10.2.89_440.33.01_linux.run --silent
      # old instructions
      # wget --no-clobber -P ~/nvidia-downloads https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-ubuntu1604.pin
      # wget --no-clobber -P ~/nvidia-downloads http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda-repo-ubuntu1604-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb
      # sudo cp ~/nvidia-downloads/cuda-ubuntu1604.pin /etc/apt/preferences.d/cuda-repository-pin-600
      # sudo /bin/bash ~/nvidia-downloads/NVIDIA-Linux-x86_64-430.40.run -s --no-drm
      # sudo dpkg -i ~/nvidia-downloads/cuda-repo-ubuntu1604-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb
      # sudo apt-key add /var/cuda-repo-10-2-local-10.2.89-440.33.01/7fa2af80.pub
      # sudo apt-get update
      # sudo apt-get -y install cuda
      echo "Done installing CUDA."
      pyenv versions
      nvidia-smi
      pyenv global 3.7.0

buildwebsite: &buildwebsite
  run:
    working_directory: ~/ParlAI/website
    name: Build the website
    command: make

# -------------------------------------------------------------------------------------
# Actual jobs
# -------------------------------------------------------------------------------------
jobs:
  datatests:
    <<: *standard_cpu37
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - <<: *setup
      - restore_cache:
          key: deps-dt-v4{{ checksum "requirements.txt" }}
      - <<: *installdeps
      - save_cache:
          key: deps-dt-v4{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/lib"
      - <<: *installtorchcpu37
      - run:
          name: Data tests
          command: coverage run setup.py test -s tests.suites.datatests -v
      - <<: *codecov

  unittests_osx:
    <<: *osx_cpu37
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - <<: *setup
      - restore_cache:
          key: deps-osx-v4{{ checksum "requirements.txt" }}
      - <<: *installdeps
      - save_cache:
          key: deps-osx-v4{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/lib"
      - <<: *installtorchcpuosx
      - run:
          name: Unit tests (OSX)
          command: coverage run setup.py test -s tests.suites.unittests -v
      - <<: *codecov

  unittests_36:
    <<: *standard_cpu36
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - <<: *setup
      - restore_cache:
          key: deps-ut36-v4{{ checksum "requirements.txt" }}
      - <<: *installdeps
      - save_cache:
          key: deps-ut36-v4{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/lib"
      - <<: *installtorchcpu36
      - run:
          name: Unit tests (py36)
          command: coverage run setup.py test -s tests.suites.unittests -v
      - <<: *codecov

  unittests_37:
    <<: *standard_cpu37
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - <<: *setup
      - restore_cache:
          key: deps-ut37-v4{{ checksum "requirements.txt" }}
      - <<: *installdeps
      - save_cache:
          key: deps-ut37-v4{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/lib"
      - <<: *installtorchcpu37
      - run:
          name: Unit tests (py37)
          command: coverage run setup.py test -s tests.suites.unittests -v
      - <<: *codecov

  unittests_gpu11:
    <<: *gpu
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - restore_cache:
          key: nvidia-downloads-v2
      - <<: *setupcuda
      - save_cache:
          key: nvidia-downloads-v2
          paths:
            - "~/nvidia-downloads/"
      - <<: *setup
      - restore_cache:
          key: deps-gpu11-v4{{ checksum "requirements.txt" }}
      - <<: *installdeps
      - save_cache:
          key: deps-gpu11-v4{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/lib"
      - <<: *installtorchgpu11
      - run:
          name: Unit tests (GPU; pytorch 1.1)
          command: coverage run setup.py test -s tests.suites.unittests -v
      - <<: *codecov

  unittests_gpu12:
    <<: *gpu
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - restore_cache:
          key: nvidia-downloads-v2
      - <<: *setupcuda
      - save_cache:
          key: nvidia-downloads-v2
          paths:
            - "~/nvidia-downloads/"
      - <<: *setup
      - restore_cache:
          key: deps-gpu12-v4{{ checksum "requirements.txt" }}
      - <<: *installdeps
      - save_cache:
          key: deps-gpu12-v4{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/lib"
      - <<: *installtorchgpu12
      - run:
          name: Unit tests (GPU; pytorch >= 1.2)
          command: coverage run setup.py test -s tests.suites.unittests -v
      - <<: *codecov

  black:
    <<: *standard_cpu37
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - <<: *setup
      - run:
          name: minimum black dependencies
          working_directory: ~/ParlAI
          command: |
            pip install -q gitpython black  # only what's needd to lint
      - run:
          name: black
          working_directory: ~/ParlAI
          command: |
            bash ./tests/lint_changed.sh -b

  mypy:
    <<: *standard_cpu37
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - <<: *setup
      - restore_cache:
          key: deps-ut37-v3{{ checksum "requirements.txt" }}
      - <<: *installdeps
      - save_cache:
          key: deps-ut37-v3{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/lib"
      - <<: *installtorchcpu37
      - run:
          name: mypy dependencies
          working_directory: ~/ParlAI
          command: |
            pip install -q mypy mypy-extensions
            pip install -q git+https://github.com/numpy/numpy-stubs.git
      - run:
          name: typechecking
          working_directory: ~/ParlAI
          command: |
            # never fail, we're just doing this now for the logging
            mypy || true

  lint:
    <<: *standard_cpu37
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - <<: *setup
      - run:
          name: JS Lint
          working_directory: ~/ParlAI/parlai/mturk
          command: |
            npm install
            npm run lint
      - run:
          name: minimum lint dependencies
          working_directory: ~/ParlAI
          command: |
            pip install -q flake8 gitpython flake8-bugbear  # only what's needd to lint
      - run:
          name: Lint
          working_directory: ~/ParlAI
          command: |
            bash ./tests/lint_changed.sh

  nightly_gpu_tests:
    <<: *gpu
    working_directory: ~/ParlAI
    parallelism: 8
    steps:
      - checkout
      - <<: *fixgit
      - restore_cache:
          key: nvidia-downloads-v2
      - <<: *setupcuda
      - save_cache:
          key: nvidia-downloads-v2
          paths:
            - "~/nvidia-downloads/"
      - <<: *setup
      - restore_cache:
          key: deps-nightly-v4{{ checksum "requirements.txt" }}
      - <<: *installdeps
      - save_cache:
          key: deps-nightly-v4{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/lib"
      - <<: *installtorchgpu12
      - run:
          name: Nightly GPU tests
          no_output_timeout: 60m
          command: coverage run setup.py test -s tests.suites.nightly_gpu -v
      - run:
          name: Quickstart unit tests (GPU; pytorch 1.1)
          command: sh tests/test_quickstart.sh
      - <<: *codecov

  mturk_tests:
    <<: *standard_cpu37
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - <<: *setup
      - restore_cache:
          key: deps-mturk-v4{{ checksum "requirements.txt" }}
      - <<: *installdeps
      - save_cache:
          key: deps-mturk-v4{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/lib"
      - run:
          name: All mturk tests
          command: coverage run setup.py test -s tests.suites.mturk -v
      - <<: *codecov

  build_website:
    <<: *standard_cpu37
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - <<: *setup
      - restore_cache:
          key: deps-bw-v4{{ checksum "requirements.txt" }}
      - <<: *installdeps
      - save_cache:
          key: deps-bw-v4{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/lib"
      - <<: *installtorchcpu37
      - <<: *buildwebsite
      - run:
          working_directory: ~/ParlAI/
          name: temp check
          command: |
            pip install s3cmd

  copyright:
    <<: *standard_cpu37
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - <<: *setup
      - restore_cache:
          key: deps-bw-v4{{ checksum "requirements.txt" }}
      - <<: *installdeps
      - save_cache:
          key: deps-bw-v4{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/lib"
      - run:
          working_directory: ~/ParlAI/
          name: Check copyrights
          command: |
              python tests/check_copyright.py

  deploy_website:
    <<: *standard_cpu37
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - <<: *setup
      - restore_cache:
          key: deps-dw-v4{{ checksum "requirements.txt" }}
      - <<: *installdeps
      - save_cache:
          key: deps-dw-v4{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/lib"
      - <<: *installtorchcpu37
      - <<: *buildwebsite
      - run:
          working_directory: ~/ParlAI/
          name: Upload the website
          command: |
            pip install s3cmd
            s3cmd --access_key="${S3_ACCESS_KEY}" --secret_key="${S3_SECRET_KEY}" sync -f --delete-removed website/build/ "s3://parl.ai/"
            s3cmd --access_key="${S3_ACCESS_KEY}" --secret_key="${S3_SECRET_KEY}" setacl --acl-public --recursive "s3://parl.ai/"
            s3cmd --access_key="${S3_ACCESS_KEY}" --secret_key="${S3_SECRET_KEY}" modify --add-header="Content-type:text/css" 's3://parl.ai/static/css/*' 's3://parl.ai/docs/_static/*.css' 's3://parl.ai/docs/_static/css/*.css'

  test_website:
    <<: *standard_cpu37
    working_directory: ~/
    steps:
      - run:
          working_directory: ~/ParlAI/
          name: Test the website
          command: |
            echo 'Testing root page:'
            curl -f -i 'https://parl.ai/'
            echo
            echo 'Testing root css:'
            curl -f -i 'https://parl.ai/static/css/parlai.css'
            echo
            echo 'Testing docs page'
            curl -f -i 'https://parl.ai/docs/'
            echo
            echo 'Testing docs css'
            curl -f -i 'https://parl.ai/docs/_static/css/parlai_theme.css'

  check_extra_tests:
    <<: *standard_cpu37
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - <<: *setup
      - run:
          name: "Conditionally launching long tests..."
          working_directory: ~/ParlAI/
          command: |
            pip install gitpython
            python setup.py develop --no-deps
            python .circleci/triggers.py | while read job; do
              curl -s \
                --data "build_parameters[CIRCLE_JOB]=${job}" \
                --data "build_parameters[CIRCLE_WORKFLOW_ID]=${CIRCLE_WORKFLOW_ID}" \
                --data "build_parameters[CIRCLE_WORKFLOW_WORKSPACE_ID]=${CIRCLE_WORKFLOW_WORKSPACE_ID}" \
                --data "build_parameters[CIRCLE_WORKFLOW_UPSTREAM_JOB_IDS]=${CIRCLE_WORKFLOW_JOB_ID}" \
                --data "revision=$CIRCLE_SHA1" \
                https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH?circle-token=$CIRCLE_API_USER_TOKEN >/dev/null
                echo "Launching ${job}..."
            done


# -------------------------------------------------------------------------------------
# Workflows
# -------------------------------------------------------------------------------------
workflows:
  version: 2
  commit:
    jobs:
      - black
      - lint
      - mypy
      - unittests_gpu11
      - unittests_gpu12
      - unittests_37
      - unittests_36
      - unittests_osx
      - copyright
      - mturk_tests:
          filters:
            branches:
              only: master
      - nightly_gpu_tests:
          filters:
            branches:
              only: master
      - check_extra_tests:
          filters:
            branches:
              ignore: master
      - build_website:
          filters:
            branches:
              ignore: master
      - deploy_website:
          filters:
            branches:
              only: master
      - test_website:
          requires:
            - deploy_website
