version: 2
jobs:
  lint:
    docker:
    - image: circleci/python:3.6.5-node
    working_directory: ~/ParlAI
    steps:
    - checkout
    - run:
        name: Fixes git
        command: |
          ( [[ "$CIRCLE_BRANCH" != "master" ]] && git branch -f master origin/master ) || true
    - run:
        name: Sets up the virtual environment
        command: |
          mkdir -p ~/venv
          virtualenv --python=python3.6 ~/venv
          echo ". ~/venv/bin/activate" >> $BASH_ENV
          . ~/venv/bin/activate
          pip3 install --upgrade --progress-bar off pip
          pip3 install --progress-bar off flake8 gitpython
          python setup.py develop
    - run:
        name: Setup JS Linting
        working_directory: ~/ParlAI/parlai/mturk
        command: npm install
    - run:
        name: JS Lint
        working_directory: ~/ParlAI/parlai/mturk
        command: npm run lint
    - run:
        name: Lint
        command: bash ./tests/lint_changed.sh
  unittests:
    docker:
    - image: circleci/python:3.6.5-node
    working_directory: ~/ParlAI
    steps:
    - checkout
    - run:
        name: Fixes git
        command: |
          ( [[ "$CIRCLE_BRANCH" != "master" ]] && git branch -f master origin/master ) || true
    - run:
        name: Sets up the virtual environment
        command: |
          mkdir -p ~/venv
          virtualenv --python=python3.6 ~/venv
          echo ". ~/venv/bin/activate" >> $BASH_ENV
          . ~/venv/bin/activate
          pip3 install --upgrade --progress-bar off pip
          pip3 install --progress-bar off flake8 gitpython
          python setup.py develop
    - run:
        name: Installs basic dependencies
        command: |
          pip3 install --progress-bar off -r requirements.txt
    - run:
        name: Install torch CPU
        command: |
          pip3 install --progress-bar off numpy
          pip3 install --progress-bar off https://download.pytorch.org/whl/cpu/torch-1.0.1.post2-cp36-cp36m-linux_x86_64.whl
    - run:
        name: Unit tests
        command: python setup.py test -s tests.suites.unittests -v
  launch_conditional_tests:
    docker:
    - image: circleci/python:3.6.5-node
    working_directory: ~/ParlAI
    steps:
    - checkout
    - run:
        name: Fixes git
        command: |
          ( [[ "$CIRCLE_BRANCH" != "master" ]] && git branch -f master origin/master ) || true
    - run:
        name: Sets up the virtual environment
        command: |
          mkdir -p ~/venv
          virtualenv --python=python3.6 ~/venv
          echo ". ~/venv/bin/activate" >> $BASH_ENV
          . ~/venv/bin/activate
          pip3 install --upgrade --progress-bar off pip
          pip3 install --progress-bar off flake8 gitpython
          python setup.py develop
    - run:
        name: Conditionally launching long tests...
        working_directory: ~/ParlAI/
        command: |
          if python tests/triggers.py mturk ; then
            curl --user ${CIRCLE_API_USER_TOKEN} \
              --data build_parameters[CIRCLE_JOB]=mturk_tests \
              --data revision=$CIRCLE_SHA1 \
              https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
              echo "Launching mturk tests..."

          fi
          if python tests/triggers.py gpu ; then
            curl --user ${CIRCLE_API_USER_TOKEN} \
              --data build_parameters[CIRCLE_JOB]=nightly_gpu_tests \
              --data revision=$CIRCLE_SHA1 \
              https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
              echo "Launching GPU tests..."
          fi
          if python tests/triggers.py longcpu ; then
            curl --user ${CIRCLE_API_USER_TOKEN} \
              --data build_parameters[CIRCLE_JOB]=nightly_cpu_tests \
              --data revision=$CIRCLE_SHA1 \
              https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
              echo "Launching nightly CPU tests..."
          fi
          if python tests/triggers.py data ; then
            curl --user ${CIRCLE_API_USER_TOKEN} \
              --data build_parameters[CIRCLE_JOB]=datatest_workflow \
              --data revision=$CIRCLE_SHA1 \
              https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
              echo "Launching data tests..."
          fi
  deploy_website:
    docker:
    - image: circleci/python:3.6.5-node
    working_directory: ~/ParlAI
    steps:
    - checkout
    - run:
        name: Fixes git
        command: |
          ( [[ "$CIRCLE_BRANCH" != "master" ]] && git branch -f master origin/master ) || true
    - run:
        name: Sets up the virtual environment
        command: |
          mkdir -p ~/venv
          virtualenv --python=python3.6 ~/venv
          echo ". ~/venv/bin/activate" >> $BASH_ENV
          . ~/venv/bin/activate
          pip3 install --upgrade --progress-bar off pip
          pip3 install --progress-bar off flake8 gitpython
          python setup.py develop
    - run:
        name: Installs basic dependencies
        command: |
          pip3 install --progress-bar off -r requirements.txt
    - run:
        name: Install torch CPU
        command: |
          pip3 install --progress-bar off numpy
          pip3 install --progress-bar off https://download.pytorch.org/whl/cpu/torch-1.0.1.post2-cp36-cp36m-linux_x86_64.whl
    - run:
        working_directory: ~/ParlAI/website
        name: Build the website
        command: make
    - run:
        working_directory: ~/ParlAI/
        name: Upload the website
        command: |
          sudo apt-get install s3cmd
          s3cmd --access_key="${S3_ACCESS_KEY}" --secret_key="${S3_SECRET_KEY}" sync -f --delete-removed website/build/ "s3://parl.ai/"
          s3cmd --access_key="${S3_ACCESS_KEY}" --secret_key="${S3_SECRET_KEY}" setacl --acl-public --recursive "s3://parl.ai/"
          s3cmd --access_key="${S3_ACCESS_KEY}" --secret_key="${S3_SECRET_KEY}" modify --add-header="Content-type:text/css" 's3://parl.ai/static/css/*' 's3://parl.ai/docs/_static/*.css' 's3://parl.ai/docs/_static/css/*.css'
  mturk_tests:
    docker:
    - image: circleci/python:3.6.5-node
    working_directory: ~/ParlAI
    steps:
    - checkout
    - run:
        name: Fixes git
        command: |
          ( [[ "$CIRCLE_BRANCH" != "master" ]] && git branch -f master origin/master ) || true
    - run:
        name: Sets up the virtual environment
        command: |
          mkdir -p ~/venv
          virtualenv --python=python3.6 ~/venv
          echo ". ~/venv/bin/activate" >> $BASH_ENV
          . ~/venv/bin/activate
          pip3 install --upgrade --progress-bar off pip
          pip3 install --progress-bar off flake8 gitpython
          python setup.py develop
    - run:
        name: Installs basic dependencies
        command: |
          pip3 install --progress-bar off -r requirements.txt
    - run:
        name: All mturk tests
        command: python setup.py test -s tests.suites.mturk -v
  nightly_cpu_tests:
    docker:
    - image: circleci/python:3.6.5-node
    working_directory: ~/ParlAI
    steps:
    - checkout
    - run:
        name: Fixes git
        command: |
          ( [[ "$CIRCLE_BRANCH" != "master" ]] && git branch -f master origin/master ) || true
    - run:
        name: Sets up the virtual environment
        command: |
          mkdir -p ~/venv
          virtualenv --python=python3.6 ~/venv
          echo ". ~/venv/bin/activate" >> $BASH_ENV
          . ~/venv/bin/activate
          pip3 install --upgrade --progress-bar off pip
          pip3 install --progress-bar off flake8 gitpython
          python setup.py develop
    - run:
        name: Installs basic dependencies
        command: |
          pip3 install --progress-bar off -r requirements.txt
    - run:
        name: Install torch CPU
        command: |
          pip3 install --progress-bar off numpy
          pip3 install --progress-bar off https://download.pytorch.org/whl/cpu/torch-1.0.1.post2-cp36-cp36m-linux_x86_64.whl
    - run:
        name: All nightly CPU tests
        no_output_timeout: 30m
        command: python setup.py test -s tests.suites.nightly_cpu -v
  nightly_gpu_tests:
    machine:
      image: default
    resource_class: gpu.medium
    working_directory: ~/ParlAI
    steps:
    - checkout
    - run:
        name: Setup CUDA
        working_directory: ~/
        command: |
          # download and install nvidia drivers, cuda, etc
          wget -q 'https://s3.amazonaws.com/ossci-linux/nvidia_driver/NVIDIA-Linux-x86_64-410.79.run'
          sudo /bin/bash ./NVIDIA-Linux-x86_64-410.79.run -s --no-drm
          wget -q https://developer.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda-repo-ubuntu1404-10-1-local-10.1.105-418.39_1.0-1_amd64.deb
          sudo dpkg -i cuda-repo-ubuntu1404-10-1-local-10.1.105-418.39_1.0-1_amd64.deb
          sudo apt-key add /var/cuda-repo-10-1-local-10.1.105-418.39/7fa2af80.pub
          nvidia-smi
          pyenv global 3.6.5
    - run:
        name: Fixes git
        command: |
          ( [[ "$CIRCLE_BRANCH" != "master" ]] && git branch -f master origin/master ) || true
    - run:
        name: Sets up the virtual environment
        command: |
          mkdir -p ~/venv
          virtualenv --python=python3.6 ~/venv
          echo ". ~/venv/bin/activate" >> $BASH_ENV
          . ~/venv/bin/activate
          pip3 install --upgrade --progress-bar off pip
          pip3 install --progress-bar off flake8 gitpython
          python setup.py develop
    - run:
        name: Install torch GPU
        command: |
          pip3 install --progress-bar off numpy
          pip3 install --progress-bar off torch
          pip3 install --progress-bar off 'git+https://github.com/rsennrich/subword-nmt.git#egg=subword-nmt' # bpe support
    - run:
        name: Installs basic dependencies
        command: |
          pip3 install --progress-bar off -r requirements.txt
    - run:
        name: GPU dependencies
        command: |
          pip3 install --progress-bar off pytorch-pretrained-bert
    - run:
        name: Nightly GPU tests
        no_output_timeout: 30m
        command: python setup.py test -s tests.suites.nightly_gpu -v
    environment:
    - CUDA_VERSION: '10.0'
workflows:
  version: 2
  datatest_workflow:
    jobs:
    - hold:
        type: approval
  commit:
    jobs:
    - lint
    - unittests
    - launch_conditional_tests
    - deploy_website:
        filters:
          branches:
            only: master
  nightly:
    triggers:
    - schedule:
        cron: 0 10 * * *
        filters:
          branches:
            only:
            - master
    jobs:
    - unittests
    - mturk_tests
    - nightly_cpu_tests
    - nightly_gpu_tests

# Original config.yml file:
# version: 2.1
# 
# # executors are environments where we run things
# executors:
#   standard_cpu:
#     docker:
#       - image: circleci/python:3.6.5-node
#   gpu:
#     environment:
#       CUDA_VERSION: \"10.0\"
#     machine:
#       image: default
#     resource_class: gpu.medium # tesla m60
# 
# # commands are nice shorthand
# commands:
#   setup:
#     description: \"Minimal CircleCI setup\"
#     steps:
#       - run:
#           name: Fixes git
#           command: |
#             ( [[ \"$CIRCLE_BRANCH\" != \"master\" ]] && git branch -f master origin/master ) || true
#       - run:
#           name: Sets up the virtual environment
#           command: |
#             mkdir -p ~/venv
#             virtualenv --python=python3.6 ~/venv
#             echo \". ~/venv/bin/activate\" >> $BASH_ENV
#             . ~/venv/bin/activate
#             pip3 install --upgrade --progress-bar off pip
#             pip3 install --progress-bar off flake8 gitpython
#             python setup.py develop
# 
#   installdeps:
#     description: \"Installs all dependencies\"
#     steps:
#       - run:
#           name: Installs basic dependencies
#           command: |
#             pip3 install --progress-bar off -r requirements.txt
# 
#   installtorchgpu:
#     description: \"Install Torch (GPU)\"
#     steps:
#       - run:
#           name: Install torch GPU
#           command: |
#             pip3 install --progress-bar off numpy
#             pip3 install --progress-bar off torch
#             pip3 install --progress-bar off 'git+https://github.com/rsennrich/subword-nmt.git#egg=subword-nmt' # bpe support
#   installtorchcpu:
#     description: \"Install Torch (CPU)\"
#     steps:
#       - run:
#           name: Install torch CPU
#           command: |
#             pip3 install --progress-bar off numpy
#             pip3 install --progress-bar off https://download.pytorch.org/whl/cpu/torch-1.0.1.post2-cp36-cp36m-linux_x86_64.whl
# 
#   setupcuda:
#     description: \"Sets up the CUDA environment\"
#     steps:
#       - run:
#           name: Setup CUDA
#           working_directory: ~/
#           command: |
#             # download and install nvidia drivers, cuda, etc
#             wget -q 'https://s3.amazonaws.com/ossci-linux/nvidia_driver/NVIDIA-Linux-x86_64-410.79.run'
#             sudo /bin/bash ./NVIDIA-Linux-x86_64-410.79.run -s --no-drm
#             wget -q https://developer.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda-repo-ubuntu1404-10-1-local-10.1.105-418.39_1.0-1_amd64.deb
#             sudo dpkg -i cuda-repo-ubuntu1404-10-1-local-10.1.105-418.39_1.0-1_amd64.deb
#             sudo apt-key add /var/cuda-repo-10-1-local-10.1.105-418.39/7fa2af80.pub
#             nvidia-smi
#             pyenv global 3.6.5
#   setupjslinting:
#     description: \"Sets up the ability to do js linting for the MTurk webapp\"
#     steps:
#       - run:
#           name: Setup JS Linting
#           working_directory: ~/ParlAI/parlai/mturk
#           command: npm install
# 
#   installgpudeps:
#     description: \"Install Dependencies specific to GPU testing\"
#     steps:
#       - run:
#           name: GPU dependencies
#           command: |
#             pip3 install --progress-bar off pytorch-pretrained-bert
# 
# jobs:
#   datatests:
#     executor: standard_cpu
#     working_directory: ~/ParlAI
#     steps:
#       - checkout
#       - setup
#       - installdeps
#       - installtorchcpu
#       - run:
#           name: Data tests
#           command: python setup.py test -s tests.suites.datatests -v
# 
#   unittests:
#     executor: standard_cpu
#     working_directory: ~/ParlAI
#     steps:
#       - checkout
#       - setup
#       - installdeps
#       - installtorchcpu
#       - run:
#           name: Unit tests
#           command: python setup.py test -s tests.suites.unittests -v
# 
#   lint:
#     executor: standard_cpu
#     working_directory: ~/ParlAI
#     steps:
#       - checkout
#       - setup
#       - setupjslinting
#       - run:
#           name: JS Lint
#           working_directory: ~/ParlAI/parlai/mturk
#           command: npm run lint
#       - run:
#           name: Lint
#           command: bash ./tests/lint_changed.sh
# 
#   launch_conditional_tests:
#     executor: standard_cpu
#     working_directory: ~/ParlAI
#     steps:
#       - checkout
#       - setup
#       - run:
#           name: \"Conditionally launching long tests...\"
#           working_directory: ~/ParlAI/
#           command: |
#             if python tests/triggers.py mturk ; then
#               curl --user ${CIRCLE_API_USER_TOKEN} \\
#                 --data build_parameters[CIRCLE_JOB]=mturk_tests \\
#                 --data revision=$CIRCLE_SHA1 \\
#                 https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
#                 echo \"Launching mturk tests...\"
# 
#             fi
#             if python tests/triggers.py gpu ; then
#               curl --user ${CIRCLE_API_USER_TOKEN} \\
#                 --data build_parameters[CIRCLE_JOB]=nightly_gpu_tests \\
#                 --data revision=$CIRCLE_SHA1 \\
#                 https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
#                 echo \"Launching GPU tests...\"
#             fi
#             if python tests/triggers.py longcpu ; then
#               curl --user ${CIRCLE_API_USER_TOKEN} \\
#                 --data build_parameters[CIRCLE_JOB]=nightly_cpu_tests \\
#                 --data revision=$CIRCLE_SHA1 \\
#                 https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
#                 echo \"Launching nightly CPU tests...\"
#             fi
#             if python tests/triggers.py data ; then
#               curl --user ${CIRCLE_API_USER_TOKEN} \\
#                 --data build_parameters[CIRCLE_JOB]=datatest_workflow \\
#                 --data revision=$CIRCLE_SHA1 \\
#                 https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
#                 echo \"Launching data tests...\"
#             fi
# 
#   nightly_gpu_tests:
#     executor: gpu
#     working_directory: ~/ParlAI
#     steps:
#       - checkout
#       - setupcuda
#       - setup
#       - installtorchgpu
#       - installdeps
#       - installgpudeps
#       - run:
#           name: Nightly GPU tests
#           no_output_timeout: 30m
#           command: python setup.py test -s tests.suites.nightly_gpu -v
# 
#   nightly_cpu_tests:
#     executor: standard_cpu
#     working_directory: ~/ParlAI
#     steps:
#       - checkout
#       - setup
#       - installdeps
#       - installtorchcpu
#       - run:
#           name: All nightly CPU tests
#           no_output_timeout: 30m
#           command: python setup.py test -s tests.suites.nightly_cpu -v
# 
#   mturk_tests:
#     executor: standard_cpu
#     working_directory: ~/ParlAI
#     steps:
#       - checkout
#       - setup
#       - installdeps
#       - run:
#           name: All mturk tests
#           command: python setup.py test -s tests.suites.mturk -v
# 
#   deploy_website:
#     executor: standard_cpu
#     working_directory: ~/ParlAI
#     steps:
#       - checkout
#       - setup
#       - installdeps
#       - installtorchcpu
#       - run:
#           working_directory: ~/ParlAI/website
#           name: Build the website
#           command: make
#       - run:
#           working_directory: ~/ParlAI/
#           name: Upload the website
#           command: |
#             sudo apt-get install s3cmd
#             s3cmd --access_key=\"${S3_ACCESS_KEY}\" --secret_key=\"${S3_SECRET_KEY}\" sync -f --delete-removed website/build/ \"s3://parl.ai/\"
#             s3cmd --access_key=\"${S3_ACCESS_KEY}\" --secret_key=\"${S3_SECRET_KEY}\" setacl --acl-public --recursive \"s3://parl.ai/\"
#             s3cmd --access_key=\"${S3_ACCESS_KEY}\" --secret_key=\"${S3_SECRET_KEY}\" modify --add-header=\"Content-type:text/css\" 's3://parl.ai/static/css/*' 's3://parl.ai/docs/_static/*.css' 's3://parl.ai/docs/_static/css/*.css'
# 
# 
# workflows:
#   version: 2
#   datatest_workflow:
#     jobs:
#       - hold:
#           type: approval
# 
#   commit:
#     jobs:
#       - lint
#       - unittests
#       - launch_conditional_tests
#       - deploy_website:
#           filters:
#             branches:
#               only: master
#   nightly:
#     triggers:
#       - schedule:
#           cron: \"0 10 * * *\" # 10am UTC is 5am NYC
#           filters:
#             branches:
#               only:
#                 - master
#     jobs:
#       - unittests
#       - mturk_tests
#       - nightly_cpu_tests
#       - nightly_gpu_tests