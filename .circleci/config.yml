version: 2.1

# -------------------------------------------------------------------------------------
# environments where we run our jobs
# -------------------------------------------------------------------------------------
executors:
  standard_cpu39:
    docker:
      - image: cimg/python:3.9.16
    environment:
      PYTHONUNBUFFERED: 1
    resource_class: xlarge

  small_cpu39:
    docker:
      - image: cimg/python:3.9.16
    environment:
      PYTHONUNBUFFERED: 1
    resource_class: medium

  osx_cpu39:
    macos:
      # https://circleci.com/docs/2.0/testing-ios/
      xcode: "12.5.1"
    environment:
      PYTHON: 3.9.16
      PYTHONUNBUFFERED: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
    resource_class: macos.x86.medium.gen2

  gpu_small:
    machine:
       image: linux-cuda-11:2023.02.1
    resource_class: gpu.nvidia.small.multi

  gpu_medium:
    machine:
       image: linux-cuda-11:2023.02.1
    resource_class: gpu.nvidia.medium.multi


# -------------------------------------------------------------------------------------
# reusable commands
# -------------------------------------------------------------------------------------
commands:
  fixgit:
    # circleci sets main to the tip of the branch, which isn't super useful for us.
    # better if main looks like it would on our local machines
    description: Fixes git
    steps:
      - run:
          name: Fixes git
          command: |
            ( [[ "$CIRCLE_BRANCH" != "main" ]] && git branch -f main origin/main ) || true

  setup:
    description: Sets up the virtual environment
    steps:
      - run:
          name: Sets up the virtual environment
          command: |
            PYTHON39_VERSION=-1
            if [[ ! -z $(which python3.9) ]]; then
              PYTHON39_VERSION=$(python3.9 --version | grep -o "[[:digit:]]\+\$")
            fi

            if [[ "$OSTYPE" == "linux-gnu"* ]] && [[ $PYTHON39_VERSION -lt 12 ]]; then 
              sudo apt update && \
              sudo apt install software-properties-common && \
              sudo add-apt-repository --yes ppa:deadsnakes/ppa && \
              sudo apt install python3.9 python3.9-dev
              PYTHON39_VERSION=$(python3.9 --version)
              echo "Python version updated to ${PYTHON39_VERSION}"
            fi

            mkdir -p ~/venv
            virtualenv --python=python3.9 ~/venv
            echo ". ~/venv/bin/activate" >> $BASH_ENV
            . ~/venv/bin/activate
            python --version

  installdeps:
    description: Install basic dependencies
    steps:
      - run:
          name: Installs basic dependencies
          command: |
            pip install --upgrade pip
            for i in $(seq 1 3); do python -m pip install --progress-bar off pip setuptools && s=0 && break || s=$? && sleep 10; done; (exit $s)
            for i in $(seq 1 3); do python -m pip install --progress-bar off coverage && s=0 && break || s=$? && sleep 10; done; (exit $s)
            mkdir -p ~/ParlAI/test-results
            for i in $(seq 1 3); do pip install -v -r requirements.txt && s=0 && break || s=$? && sleep 10; done; (exit $s)
            for i in $(seq 1 3); do python setup.py develop && s=0 && break || s=$? && sleep 10; done; (exit $s)
            for i in $(seq 1 3); do python -c "import nltk; nltk.download('punkt')" && s=0 && break || s=$? && sleep 10; done; (exit $s)
            for i in $(seq 1 3); do python -c "import nltk; nltk.download('stopwords')" && s=0 && break || s=$? && sleep 10; done; (exit $s)
            for i in $(seq 1 3); do python -c "import nltk; nltk.download('omw-1.4')" && s=0 && break || s=$? && sleep 10; done; (exit $s)
            for i in $(seq 1 3); do python -m pip install --progress-bar off spacy && s=0 && break || s=$? && sleep 10; done; (exit $s)
            for i in $(seq 1 3); do python -m spacy download en_core_web_sm && s=0 && break || s=$? && sleep 10; done; (exit $s)

  installtorchgpu:
    description: Install torch GPU and dependencies
    steps:
      - run:
          name: Install torch GPU and dependencies
          command: |
            python -m pip install --progress-bar off torch==2.0.0 torchvision==0.15.1+cu118 torchaudio==2.0.0 --index-url https://download.pytorch.org/whl/cu118
            python -m pip install --progress-bar off 'fairscale~=0.4.0'
            python -m pip install --progress-bar off pytorch-pretrained-bert
            python -m pip install --progress-bar off 'transformers~=4.29.0'
            python -m pip install --progress-bar off 'fairseq==0.10.0'
            python -m pip install --progress-bar off 'faiss-gpu==1.7.0'
            python -m pip uninstall dataclasses -y
            python -c 'import torch; print("Torch version:", torch.__version__)'
            python -m torch.utils.collect_env
            python -c 'import torch; print("Torch version:", torch.__version__)'
            python -m torch.utils.collect_env

  installtorchcpuosx:
    description: Install torch CPU and dependencies
    steps:
      - run:
          name: Install torch CPU and dependencies
          command: |
            python -m pip install --progress-bar off 'transformers~=4.29.0'
            python -m pip install --progress-bar off torch==2.0.0 torchvision==0.15.1 torchaudio==2.0.0
            python -c 'import torch; print("Torch version:", torch.__version__)'
            python -m torch.utils.collect_env

  installtorchcpu:
    description: Install torch CPU and dependencies
    steps:
      - run:
          name: Install torch CPU and dependencies
          command: |
            python -m pip install --progress-bar off torch==2.0.0 torchvision==0.15.1 torchaudio==2.0.0 --index-url https://download.pytorch.org/whl/cpu
            python -m pip install --progress-bar off 'transformers~=4.29.0'
            python -m pip install --progress-bar off pytorch-pretrained-bert
            python -c 'import torch; print("Torch version:", torch.__version__)'
            python -m torch.utils.collect_env

  installcrowdsourcingdeps:
    description: Install Mephisto
    steps:
      - restore_cache:
          key: mephisto-20230419-{{ checksum "requirements.txt" }}
      - run:
            name: Install Mephisto
            command: |
              curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
              sudo apt update
              sudo apt upgrade
              sudo apt install -y nodejs
              node -v
              npm -v
              cd ..
              git clone git@github.com:facebookresearch/Mephisto.git Mephisto
              cd Mephisto
              pip install -e .
              # `echo` so that ENTER will be pressed at the prompt
              echo | mephisto check
      - save_cache:
          key: mephisto-20230419-{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/bin"
            - "~/venv/lib"

  installchecklist:
    description: Install checklist and dependencies
    steps:
      - run:
          name: Install checklist and dependencies
          command: |
            for i in $(seq 1 3); do python -m pip install --progress-bar off checklist && s=0 && break || s=$? && sleep 10; done; (exit $s)

  setupcuda:
    description: Setup CUDA
    steps:
      - run:
          name: Setup CUDA
          working_directory: ~/
          command: |
            nvidia-smi
            sudo update-alternatives --set cuda /usr/local/cuda-11.8
            nvcc --version
            PYTHON3_VENV=$(pyenv versions | grep '3\..*' | cut -f 2 -d ' ')
            echo "pyenv found Python ${PYTHON3_VENV}"
            pyenv global $PYTHON3_VENV

  findtests:
    description: Find tests to run
    parameters:
      marker:
        type: string
    steps:
      - run:
          working_directory: ~/ParlAI
          name: Find tests to run
          command: |
            set +o pipefail
            mkdir -p ~/ParlAI/data/models
            python -m pytest -m << parameters.marker >> --collect-only | grep '<'  | sed "s/^ *//" | grep -v ':'> teststorun.txt
            cat teststorun.txt

  runtests:
    description: Run a full suite of unit tests
    parameters:
      cachename:
        description: the key for our caches. date and checksum will be added
        type: string
      marker:
        description: the pytest marker to filter on
        type: string
      more_installs:
        description: Any extra installation commands to run
        type: steps
        default: []
      install_cuda:
        description: Should we install cuda?
        type: boolean
        default: false
      pytest_flags:
        description: extra flags to pass to pytest
        type: string
        default: "-v"
    steps:
      - checkout
      - when:
          condition: << parameters.install_cuda >>
          steps:
            - setupcuda
      - fixgit
      - restore_cache:
          key: deps-20230606-<< parameters.cachename >>-{{ checksum "requirements.txt" }}
      - setup
      - installdeps
      - << parameters.more_installs >>
      - save_cache:
          key: deps-20230606-<< parameters.cachename >>-{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/bin"
            - "~/venv/lib"
      - findtests:
          marker: << parameters.marker >>
      - restore_cache:
          key: data-20230606-<< parameters.cachename >>-{{ checksum "teststorun.txt" }}
      - run:
          name: Run tests
          no_output_timeout: 60m
          command: |
            coverage run -m pytest -m << parameters.marker >> << parameters.pytest_flags >> --junitxml=test-results/junit.xml
      - save_cache:
          key: data-20230606-<< parameters.cachename >>-{{ checksum "teststorun.txt" }}
          paths:
            - "~/ParlAI/data"
      - store_test_results:
          path: test-results

  website:
    description: Build (and possibly deploy) the website
    parameters:
      deploy:
        type: boolean
        default: false
    steps:
      - checkout
      - fixgit
      - restore_cache:
          key: deps-20230606-bw-{{ checksum "requirements.txt" }}
      - setup
      - installdeps
      - installtorchcpu
      - save_cache:
          key: deps-20230606-bw-{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/bin"
            - "~/venv/lib"
      - run:
          working_directory: ~/ParlAI/website
          name: build the website
          command: make
      - run:
          name: zip up the website
          working_directory: ~/ParlAI/website/build/
          command: |
            zip -r ~/ParlAI/website.zip *
      - store_artifacts:
          path: website.zip
      - run:
          name: check for bad links
          working_directory: ~/ParlAI/
          command: |
            pip install linkchecker
            python -m http.server --directory website/build >/dev/null &
            linkchecker http://localhost:8000/
            kill %1
      - when:
         condition: << parameters.deploy >>
         steps:
         - run:
             working_directory: ~/ParlAI/
             name: Upload the website
             command: |
               pip install s3cmd
               s3cmd --access_key="${S3_ACCESS_KEY}" --secret_key="${S3_SECRET_KEY}" sync -f --delete-removed website/build/ "s3://parl.ai/"
               s3cmd --access_key="${S3_ACCESS_KEY}" --secret_key="${S3_SECRET_KEY}" setacl --acl-public --recursive "s3://parl.ai/"
               s3cmd --access_key="${S3_ACCESS_KEY}" --secret_key="${S3_SECRET_KEY}" modify --add-header="Content-type:text/css" 's3://parl.ai/static/css/*' 's3://parl.ai/docs/_static/*.css' 's3://parl.ai/docs/_static/css/*.css'


# -------------------------------------------------------------------------------------
# Actual jobs
# -------------------------------------------------------------------------------------
jobs:
  cleaninstall_39:
    executor: small_cpu39
    working_directory: ~/ParlAI
    parallelism: 1
    steps:
      - checkout
      - fixgit
      - setup
      - run:
          name: Test installation instructions
          no_output_timeout: 60m
          command: |
            python -m pip install --progress-bar off --upgrade pip
            python -m pip install --progress-bar off pip setuptools
            python setup.py develop
            parlai display_data -t integration_tests

  unittests_osx:
    executor: osx_cpu39
    working_directory: ~/ParlAI
    parallelism: 2
    steps:
      - runtests:
          cachename: osx
          marker: unit

  unittests_39:
    executor: standard_cpu39
    working_directory: ~/ParlAI
    parallelism: 2
    steps:
      - runtests:
          more_installs:
            - installtorchcpu
          cachename: ut39
          marker: unit

  unittests_gpu18:
    executor: gpu_small
    working_directory: ~/ParlAI
    parallelism: 8
    steps:
      - runtests:
          more_installs:
            - installtorchgpu
          install_cuda: true
          cachename: gpu18
          marker: unit

  long_gpu_tests:
    executor: gpu_medium
    working_directory: ~/ParlAI
    parallelism: 32
    steps:
      - runtests:
          more_installs:
            - installtorchgpu
          install_cuda: true
          cachename: nightly
          marker: nightly_gpu
          pytest_flags: -v -s

  crowdsourcing_tests:
    executor: small_cpu39
    working_directory: ~/ParlAI
    parallelism: 1
    steps:
      - runtests:
          cachename: crowdsourcing
          marker: crowdsourcing
          more_installs:
            - installtorchcpu
            - installcrowdsourcingdeps
          pytest_flags: -x

  teacher_tests:
    executor: standard_cpu39
    working_directory: ~/ParlAI
    parallelism: 16
    steps:
      - runtests:
          more_installs:
            - installtorchcpu
            - installchecklist
          cachename: teacher
          marker: teacher
          pytest_flags: -v -s

  build_website:
    executor: small_cpu39
    working_directory: ~/ParlAI
    parallelism: 1
    steps:
      - website:
          deploy: false

  deploy_website:
    executor: small_cpu39
    working_directory: ~/ParlAI
    steps:
      - website:
          deploy: true

  test_website:
    executor: small_cpu39
    working_directory: ~/ParlAI
    steps:
      - run:
          name: Test the website
          command: |
            echo 'Testing root page:'
            curl -f -i 'https://parl.ai/'
            echo
            echo 'Testing root css:'
            curl -f -i 'https://parl.ai/static/css/parlai.css'
            echo
            echo 'Testing docs page'
            curl -f -i 'https://parl.ai/docs/'
            echo
            echo 'Testing docs css'
            curl -f -i 'https://parl.ai/docs/_static/css/parlai_theme.css'


workflows:
  version: 2
  commit:
    jobs:
      - cleaninstall_39
      - unittests_gpu18:
          requires:
            - unittests_39
      - unittests_osx:
          requires:
            - unittests_39
      - unittests_39
      - long_gpu_tests:
          requires:
            - unittests_39
      - crowdsourcing_tests:
          requires:
            - unittests_39
      - teacher_tests:
          requires:
            - unittests_39
      - build_website:
          filters:
            branches:
              ignore: main
      - deploy_website:
          filters:
            branches:
              only: main
      - test_website:
          requires:
            - deploy_website
