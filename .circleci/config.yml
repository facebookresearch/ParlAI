version: 2

# -------------------------------------------------------------------------------------
# environments where we run our jobs
# -------------------------------------------------------------------------------------
standard_cpu38: &standard_cpu38
  docker:
    - image: circleci/python:3.8.0-buster-node
  environment:
    PYTHONUNBUFFERED: 1
  resource_class: xlarge

standard_cpu37: &standard_cpu37
  docker:
    - image: circleci/python:3.7.5-buster-node
  environment:
    PYTHONUNBUFFERED: 1
  resource_class: xlarge

standard_cpu36: &standard_cpu36
  docker:
    - image: circleci/python:3.6.9-buster-node
  environment:
    PYTHONUNBUFFERED: 1
  resource_class: xlarge

osx_cpu37: &osx_cpu37
  macos:
      # https://circleci.com/docs/2.0/testing-ios/
    xcode: "11.3.1"
  environment:
    PYTHON: 3.7.1
    PYTHONUNBUFFERED: 1
    HOMEBREW_NO_AUTO_UPDATE: 1

gpu: &gpu
  environment:
    CUDA_VERSION: "10.2"
    PYTHONUNBUFFERED: 1
  machine:
    image: ubuntu-1604:201903-01
  resource_class: gpu.medium # tesla m60
# -------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------
# reusable commands
# -------------------------------------------------------------------------------------
fixgit: &fixgit
  # circleci sets master to the tip of the branch, which isn't super useful for us.
  # better if master looks like it would on our local machines
  run:
    name: Fixes git
    command: |
      ( [[ "$CIRCLE_BRANCH" != "master" ]] && git branch -f master origin/master ) || true

setup: &setup
  run:
    name: Sets up the virtual environment
    command: |
      mkdir -p ~/venv
      virtualenv --python=python3 ~/venv
      echo ". ~/venv/bin/activate" >> $BASH_ENV
      . ~/venv/bin/activate
      python --version


codecov: &codecov
  run:
    name: Coverage report
    command: |
      python -m codecov --flags $CIRCLE_JOB

installdeps: &installdeps
  run:
    name: Installs basic dependencies
    command: |
      python -m pip install --progress-bar off --upgrade pip setuptools
      python -m pip install --progress-bar off coverage
      python -m pip install --progress-bar off codecov
      mkdir -p ~/ParlAI/test-results
      pip install -v -r requirements.txt
      python setup.py develop
      python -c "import nltk; nltk.download('punkt')"

installtorchgpu14: &installtorchgpu14
  run:
    name: Install torch GPU and dependencies
    command: |
      python -m pip install --progress-bar off 'torch==1.4.0'
      python -m pip install --progress-bar off 'subword-nmt==0.3.7'
      python -m pip install --progress-bar off pytorch-pretrained-bert
      python -m pip install --progress-bar off 'torchtext==0.5.0'
      python -m pip install --progress-bar off 'torchvision==0.5.0'
      python -m pip install --progress-bar off transformers
      python -c 'import torch; print("Torch version:", torch.__version__)'
      python -m torch.utils.collect_env


installtorchgpu13: &installtorchgpu13
  run:
    name: Install torch GPU and dependencies
    command: |
      python -m pip install --progress-bar off 'torch==1.3.1'
      python -m pip install --progress-bar off 'subword-nmt==0.3.7'
      python -m pip install --progress-bar off pytorch-pretrained-bert
      python -m pip install --progress-bar off transformers
      python -c 'import torch; print("Torch version:", torch.__version__)'
      python -m torch.utils.collect_env


installtorchcpuosx: &installtorchcpuosx
  run:
    name: Install torch CPU and dependencies
    command: |
      python -m pip install --progress-bar off torch==1.4.0
      python -c 'import torch; print("Torch version:", torch.__version__)'
      python -m torch.utils.collect_env

installtorchcpu: &installtorchcpu
  run:
    name: Install torch CPU and dependencies
    command: |
      python -m pip install --progress-bar off torch==1.4.0+cpu torchtext==0.5.0 torchvision==0.5.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
      python -c 'import torch; print("Torch version:", torch.__version__)'
      python -m torch.utils.collect_env

setupcuda: &setupcuda
  run:
    name: Setup CUDA
    working_directory: ~/
    command: |
      # download and install nvidia drivers, cuda, etc
      wget --quiet --no-clobber -P ~/nvidia-downloads 'https://s3.amazonaws.com/ossci-linux/nvidia_driver/NVIDIA-Linux-x86_64-430.40.run'
      time sudo /bin/bash ~/nvidia-downloads/NVIDIA-Linux-x86_64-430.40.run --no-drm -q --ui=none
      echo "Done installing NVIDIA drivers."
      pyenv versions
      nvidia-smi
      pyenv global 3.7.0

buildwebsite: &buildwebsite
  run:
    working_directory: ~/ParlAI/website
    name: Build the website
    command: make

# -------------------------------------------------------------------------------------
# Actual jobs
# -------------------------------------------------------------------------------------
jobs:
  unittests_osx:
    <<: *osx_cpu37
    working_directory: ~/ParlAI
    parallelism: 8
    steps:
      - checkout
      - <<: *fixgit
      - restore_cache:
          key: deps-20200516-osx-{{ checksum "requirements.txt" }}
      - <<: *setup
      - <<: *installdeps
      - <<: *installtorchcpuosx
      - save_cache:
          key: deps-20200516-osx-{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/bin"
            - "~/venv/lib"
      - run:
          name: Unit tests (OSX)
          no_output_timeout: 60m
          command: coverage run -m pytest --junitxml=test-results/junit.xml -m unit -v
      - <<: *codecov
      - store_test_results:
          path: test-results

  unittests_36:
    <<: *standard_cpu36
    working_directory: ~/ParlAI
    parallelism: 16
    steps:
      - checkout
      - run:
          name: output test split
          command: circleci tests split --split-by=timings --timings-type=classname
      - <<: *fixgit
      - restore_cache:
          key: deps-20200516-ut36-{{ checksum "requirements.txt" }}
      - <<: *setup
      - <<: *installtorchcpu
      - <<: *installdeps
      - save_cache:
          key: deps-20200516-ut36-{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/bin"
            - "~/venv/lib"
      - run:
          name: Unit tests (py36)
          no_output_timeout: 60m
          command: coverage run -m pytest --junitxml=test-results/junit.xml -m unit -v
      - <<: *codecov
      - store_test_results:
          path: test-results

  unittests_38:
    <<: *standard_cpu38
    working_directory: ~/ParlAI
    parallelism: 16
    steps:
      - checkout
      - <<: *fixgit
      - restore_cache:
          key: deps-20200516-ut38-{{ checksum "requirements.txt" }}
      - <<: *setup
      - <<: *installtorchcpu
      - <<: *installdeps
      - save_cache:
          key: deps-20200516-ut38-{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/bin"
            - "~/venv/lib"
      - run:
          name: Unit tests (py38)
          no_output_timeout: 60m
          command: coverage run -m pytest --junitxml=test-results/junit.xml -m unit -v
      - <<: *codecov
      - store_test_results:
          path: test-results

  unittests_37:
    <<: *standard_cpu37
    working_directory: ~/ParlAI
    parallelism: 16
    steps:
      - checkout
      - <<: *fixgit
      - restore_cache:
          key: deps-20200516-ut37-{{ checksum "requirements.txt" }}
      - <<: *setup
      - <<: *installtorchcpu
      - <<: *installdeps
      - save_cache:
          key: deps-20200516-ut37-{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/bin"
            - "~/venv/lib"
      - run:
          name: Unit tests (py37)
          no_output_timeout: 60m
          command: coverage run -m pytest --junitxml=test-results/junit.xml -m unit -v
      - <<: *codecov
      - store_test_results:
          path: test-results

  unittests_gpu13:
    <<: *gpu
    working_directory: ~/ParlAI
    parallelism: 16
    steps:
      - checkout
      - <<: *fixgit
      - restore_cache:
          key: nvidia-downloads-20200516
      - <<: *setupcuda
      - save_cache:
          key: nvidia-downloads-20200516
          paths:
            - "~/nvidia-downloads/"
      - restore_cache:
          key: deps-20200516-gpu13-{{ checksum "requirements.txt" }}
      - <<: *setup
      - <<: *installtorchgpu13
      - <<: *installdeps
      - save_cache:
          key: deps-20200516-gpu13-{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/bin"
            - "~/venv/lib"
      - run:
          name: Unit tests (GPU; pytorch 1.3)
          no_output_timeout: 60m
          command: coverage run -m pytest --junitxml=test-results/junit.xml -m unit -v
      - <<: *codecov
      - store_test_results:
          path: test-results

  unittests_gpu14:
    <<: *gpu
    working_directory: ~/ParlAI
    parallelism: 16
    steps:
      - checkout
      - <<: *fixgit
      - restore_cache:
          key: nvidia-downloads-20200516
      - <<: *setupcuda
      - save_cache:
          key: nvidia-downloads-20200516
          paths:
            - "~/nvidia-downloads/"
      - restore_cache:
          key: deps-20200516-gpu14-{{ checksum "requirements.txt" }}
      - <<: *setup
      - <<: *installtorchgpu14
      - <<: *installdeps
      - save_cache:
          key: deps-20200516-gpu14-{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/bin"
            - "~/venv/lib"
      - run:
          name: Unit tests (GPU; pytorch 1.4)
          no_output_timeout: 60m
          command: coverage run -m pytest --junitxml=test-results/junit.xml -m unit -v
      - <<: *codecov
      - store_test_results:
          path: test-results

  nightly_gpu_tests:
    <<: *gpu
    working_directory: ~/ParlAI
    parallelism: 8
    steps:
      - checkout
      - <<: *fixgit
      - restore_cache:
          key: nvidia-downloads-20200516
      - <<: *setupcuda
      - save_cache:
          key: nvidia-downloads-20200516
          paths:
            - "~/nvidia-downloads/"
      - restore_cache:
          key: deps-20200516-nightly-{{ checksum "requirements.txt" }}
      - <<: *setup
      - <<: *installtorchgpu14
      - <<: *installdeps
      - save_cache:
          key: deps-20200516-nightly-{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/bin"
            - "~/venv/lib"
      - run:
          name: Nightly GPU tests
          no_output_timeout: 60m
          command: coverage run -m pytest --junitxml=test-results/junit.xml -m nightly_gpu -v
      - run:
          name: Quickstart unit tests (GPU; pytorch 1.4)
          command: sh tests/test_quickstart.sh
      - <<: *codecov
      - store_test_results:
          path: test-results

  mturk_tests:
    <<: *standard_cpu37
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - restore_cache:
          key: deps-20200516-mturk-{{ checksum "requirements.txt" }}
      - <<: *setup
      - <<: *installdeps
      - save_cache:
          key: deps-20200516-mturk-{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/bin"
            - "~/venv/lib"
      - run:
          name: All mturk tests
          command: coverage run -m pytest --junitxml=test-results/junit.xml -m mturk parlai/mturk/core/test/*.py -v
      - <<: *codecov
      - store_test_results:
          path: test-results

  build_website:
    <<: *standard_cpu37
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - restore_cache:
          key: deps-20200516-bw-{{ checksum "requirements.txt" }}
      - <<: *setup
      - <<: *installdeps
      - <<: *installtorchgpu14
      - run:
          working_directory: ~/ParlAI/
          name: more build website dependencies
          command: |
            pip install s3cmd
            sudo apt-get install linkchecker
      - save_cache:
          key: deps-20200516-bw-{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/bin"
            - "~/venv/lib"
      - <<: *buildwebsite
      - run:
          name: check for bad links
          working_directory: ~/ParlAI/
          command: |
            python -m http.server --directory website/build >/dev/null &
            linkchecker http://localhost:8000/
            kill %1

  deploy_website:
    <<: *standard_cpu37
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - restore_cache:
          key: deps-20200516-dw-{{ checksum "requirements.txt" }}
      - <<: *setup
      - <<: *installdeps
      - <<: *installtorchgpu14
      - save_cache:
          key: deps-20200516-dw-{{ checksum "requirements.txt" }}
          paths:
            - "~/venv/bin"
            - "~/venv/lib"
      - <<: *buildwebsite
      - run:
          working_directory: ~/ParlAI/
          name: Upload the website
          command: |
            pip install s3cmd
            s3cmd --access_key="${S3_ACCESS_KEY}" --secret_key="${S3_SECRET_KEY}" sync -f --delete-removed website/build/ "s3://parl.ai/"
            s3cmd --access_key="${S3_ACCESS_KEY}" --secret_key="${S3_SECRET_KEY}" setacl --acl-public --recursive "s3://parl.ai/"
            s3cmd --access_key="${S3_ACCESS_KEY}" --secret_key="${S3_SECRET_KEY}" modify --add-header="Content-type:text/css" 's3://parl.ai/static/css/*' 's3://parl.ai/docs/_static/*.css' 's3://parl.ai/docs/_static/css/*.css'

  test_website:
    <<: *standard_cpu37
    working_directory: ~/
    steps:
      - run:
          working_directory: ~/ParlAI/
          name: Test the website
          command: |
            echo 'Testing root page:'
            curl -f -i 'https://parl.ai/'
            echo
            echo 'Testing root css:'
            curl -f -i 'https://parl.ai/static/css/parlai.css'
            echo
            echo 'Testing docs page'
            curl -f -i 'https://parl.ai/docs/'
            echo
            echo 'Testing docs css'
            curl -f -i 'https://parl.ai/docs/_static/css/parlai_theme.css'

  check_extra_tests:
    <<: *standard_cpu37
    working_directory: ~/ParlAI
    steps:
      - checkout
      - <<: *fixgit
      - <<: *setup
      - run:
          name: "Conditionally launching long tests..."
          working_directory: ~/ParlAI/
          command: |
            pip install gitpython
            python setup.py develop --no-deps
            python .circleci/triggers.py | while read job; do
              curl -s \
                --data "build_parameters[CIRCLE_JOB]=${job}" \
                --data "build_parameters[CIRCLE_WORKFLOW_ID]=${CIRCLE_WORKFLOW_ID}" \
                --data "build_parameters[CIRCLE_WORKFLOW_WORKSPACE_ID]=${CIRCLE_WORKFLOW_WORKSPACE_ID}" \
                --data "build_parameters[CIRCLE_WORKFLOW_UPSTREAM_JOB_IDS]=${CIRCLE_WORKFLOW_JOB_ID}" \
                --data "revision=$CIRCLE_SHA1" \
                https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH?circle-token=$CIRCLE_API_USER_TOKEN >/dev/null
                echo "Launching ${job}..."
            done


# -------------------------------------------------------------------------------------
# Workflows
# -------------------------------------------------------------------------------------
workflows:
  version: 2
  commit:
    jobs:
      - unittests_gpu14
      - unittests_38
      - unittests_37
      - unittests_36
      - mturk_tests
      - unittests_osx:
          filters:
            branches:
              only: master
      - nightly_gpu_tests:
          filters:
            branches:
              only: master
      - check_extra_tests:
          filters:
            branches:
              ignore: master
      - build_website:
          filters:
            branches:
              ignore: master
      - deploy_website:
          filters:
            branches:
              only: master
      - test_website:
          requires:
            - deploy_website
